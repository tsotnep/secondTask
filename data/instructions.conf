# File to define opcodes to instruction name mapping

# Syntax:
# INSTRUCTION_NAME	:	opcode	:	is_operand_signed

# * INSTRUCTION_NAME: Human readable name for the instruction to be used is assembler. Example: ADD
# * opcode (max 8 bits): Processor's binary opcode for that maps to the instruction, for example 00101
# * is_operand_signed: Should the operand's datatype for this instruction be considered as signed?
#	- If the operand for an instruction IS signed, value for is_operand_signed has to be 1, otherwize 0.
####################################################################################################################

# Begin instruction map
#########################
ADD     :	00000	:	1
SUB     :	00001	:	1
INC     :	00010	:	1
DEC     :	00011	:	1
SLL     :	00100	:	1
SRL     :	00101	:	1
SLA     :	00110	:	1
SRA     :	00111	:	1
AND     :	01000	:	1
OR      :	01001	:	1
XOR     :	01010	:	1
INV     :	01011	:	1
NEG     :	01100	:	1
LOADN   :	01101	:	1
LOADV   :	01110	:	0
STORE   :	01111	:	0
JMP     :	10000	:	0
BIZ     :	10001	:	0
BINE    :	10010	:	1
BIOF    :	10011	:	0
SETR    :	10100	:	1
CLRR    :	10101	:	0
SETF    :	10110	:	0
CLRF    :	10111	:	0
MUXR    :	11000	:	0
MUXOP   :	11001	:	0
LOADA   :	11010	:	0
STOREA  :	11011	:	0
HALT    :	11100	:	0
NOP     :	11111	:	0
#########################
# End of instruction map